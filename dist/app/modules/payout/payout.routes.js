"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayoutRoutes = void 0;
const express_1 = require("express");
const payout_controller_1 = require("./payout.controller");
const auth_1 = __importDefault(require("../../middlewares/auth"));
const client_1 = require("@prisma/client");
const validateRequest_1 = __importDefault(require("../../middlewares/validateRequest"));
const payout_validation_1 = __importDefault(require("./payout.validation"));
const router = (0, express_1.Router)();
router.post('/request', (0, auth_1.default)(client_1.Role.COUNSELOR), (0, validateRequest_1.default)(payout_validation_1.default.createPayoutRequestSchema), payout_controller_1.PayoutController.createPayoutRequest);
router.get('/my-requests', (0, auth_1.default)(client_1.Role.COUNSELOR), (0, validateRequest_1.default)(payout_validation_1.default.counsellorPayoutFiltersSchema), payout_controller_1.PayoutController.getMyPayoutRequests);
router.get('/all', (0, auth_1.default)(client_1.Role.SUPER_ADMIN), (0, validateRequest_1.default)(payout_validation_1.default.payoutFiltersSchema), payout_controller_1.PayoutController.getAllPayoutRequests);
router.get('/:id', (0, auth_1.default)(client_1.Role.SUPER_ADMIN), payout_controller_1.PayoutController.getPayoutRequestById);
router.get('/counsellor/:counsellor_id', (0, auth_1.default)(client_1.Role.SUPER_ADMIN), (0, validateRequest_1.default)(payout_validation_1.default.counsellorPayoutFiltersSchema), payout_controller_1.PayoutController.getCounsellorPayoutRequests);
router.patch('/:id/process', (0, auth_1.default)(client_1.Role.SUPER_ADMIN), (0, validateRequest_1.default)(payout_validation_1.default.processPayoutRequestSchema), payout_controller_1.PayoutController.processPayoutRequest);
router.post('/:id/execute', (0, auth_1.default)(client_1.Role.SUPER_ADMIN), payout_controller_1.PayoutController.executePayout);
exports.PayoutRoutes = router;
