generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  COUNSELOR
}

enum SessionType {
  ONLINE
  IN_PERSON
}

enum SlotStatus {
  AVAILABLE
  PROCESSING
  BOOKED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DELETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
  DELETED
}

enum PayoutStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  FAILED
}

enum BalanceTransactionType {
  CREDIT
  DEBIT
  PAYOUT
  MANUAL_ADJUSTMENT
}

enum MeetingPlatform {
  GOOGLE_MEET
  ZOOM
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  email                  String    @unique
  password               String
  role                   Role      @default(COUNSELOR)
  specialization         String?
  profile_picture        String?
  google_access_token    String?
  google_refresh_token   String?
  google_token_expiry    DateTime?
  google_account_name    String? // Google account name
  google_account_email   String? // Google account email
  google_account_picture String? // Google account picture URL
  is_calendar_connected  Boolean   @default(false)
  stripe_account_id      String? // Stripe Connect account ID
  stripe_public_key      String? // Stripe publishable key
  stripe_secret_key      String? // Stripe secret key (encrypted)
  is_stripe_connected    Boolean   @default(false)
  is_deleted             Boolean   @default(false)
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt

  // Relations
  calendars            Calendar[]
  appointments         Appointment[]
  counsellor_balance   CounsellorBalance?
  payout_requests      PayoutRequest[]
  balance_transactions BalanceTransaction[]

  @@map("users")
}

model Calendar {
  id           String   @id @default(uuid())
  counselor_id String
  date         DateTime @db.Date
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  counselor  User       @relation(fields: [counselor_id], references: [id], onDelete: Cascade)
  time_slots TimeSlot[]

  @@unique([counselor_id, date])
  @@index([counselor_id])
  @@index([date])
  @@map("calendars")
}

model TimeSlot {
  id             String      @id @default(uuid())
  calendar_id    String
  // room_id     String?
  start_time     String
  end_time       String
  type           SessionType
  status         SlotStatus  @default(AVAILABLE)
  is_rescheduled Boolean     @default(false)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  // Relations
  calendar     Calendar      @relation(fields: [calendar_id], references: [id], onDelete: Cascade)
  // room        Room?        @relation(fields: [room_id], references: [id])
  appointments Appointment[]

  @@index([calendar_id, start_time, end_time])
  @@index([status])
  @@index([type])
  @@map("time_slots")
}

// model Room {
//   id         String   @id @default(uuid())
//   name       String   @unique
//   location   String?
//   capacity   Int?
//   is_active  Boolean  @default(true)
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt

//   // Relations
//   time_slots TimeSlot[]

//   @@map("rooms")
// }

model Client {
  id            String   @id @default(uuid())
  first_name    String
  last_name     String
  email         String   @unique
  phone         String
  date_of_birth DateTime @db.Date
  gender        Gender
  is_verified   Boolean  @default(false)
  is_deleted    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  appointments Appointment[]
  payments     Payment[]

  @@index([email])
  @@index([phone])
  @@map("clients")
}

model Appointment {
  id             String            @id @default(uuid())
  client_id      String
  counselor_id   String
  time_slot_id   String
  session_type   SessionType
  date           DateTime          @db.Date
  notes          String?
  status         AppointmentStatus @default(PENDING)
  is_rescheduled Boolean           @default(false)
  event_id       String? // Google Calendar event ID
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt

  // Relations
  client    Client   @relation(fields: [client_id], references: [id], onDelete: Restrict)
  counselor User     @relation(fields: [counselor_id], references: [id], onDelete: Restrict)
  time_slot TimeSlot @relation(fields: [time_slot_id], references: [id], onDelete: Cascade)
  payment   Payment?
  meeting   Meeting?

  @@index([client_id])
  @@index([counselor_id])
  @@index([date])
  @@index([status])
  @@map("appointments")
}

model Meeting {
  id             String          @id @default(uuid())
  appointment_id String          @unique
  platform       MeetingPlatform @default(GOOGLE_MEET)
  link           String
  created_at     DateTime        @default(now())

  // Relations
  appointment Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)

  @@map("meetings")
}

model Payment {
  id                   String        @id @default(uuid())
  appointment_id       String        @unique
  client_id            String
  amount               Decimal       @db.Decimal(10, 2)
  currency             String        @default("AUD") @db.VarChar(3)
  status               PaymentStatus @default(PENDING)
  payment_method       String?
  transaction_id       String?       @unique
  payment_gateway_data Json?
  refund_amount        Decimal?      @db.Decimal(10, 2)
  refund_reason        String?
  processed_at         DateTime?
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  client      Client      @relation(fields: [client_id], references: [id], onDelete: Restrict)

  @@index([appointment_id])
  @@index([client_id])
  @@index([status])
  @@index([transaction_id])
  @@map("payments")
}

model EmailOTPVerification {
  id          String   @id @default(uuid())
  email       String   @db.VarChar(255)
  otp         Int      @db.Integer
  expires_at  DateTime
  is_verified Boolean  @default(false)
  created_at  DateTime @default(now())

  @@index([email])
  @@map("email_otp_verifications")
}

model CounsellorBalance {
  id              String   @id @default(uuid())
  counsellor_id   String   @unique
  current_balance Decimal  @default(0.00) @db.Decimal(10, 2)
  total_earned    Decimal  @default(0.00) @db.Decimal(10, 2)
  total_withdrawn Decimal  @default(0.00) @db.Decimal(10, 2)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  counsellor User @relation(fields: [counsellor_id], references: [id], onDelete: Cascade)

  @@index([counsellor_id])
  @@map("counsellor_balances")
}

model PayoutRequest {
  id                 String       @id @default(uuid())
  counsellor_id      String
  amount             Decimal      @db.Decimal(10, 2)
  status             PayoutStatus @default(PENDING)
  requested_at       DateTime     @default(now())
  processed_at       DateTime?
  processed_by       String? // Super admin who processed the request
  rejection_reason   String?
  stripe_transfer_id String? // Stripe transfer ID for tracking
  notes              String?
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt

  // Relations
  counsellor User @relation(fields: [counsellor_id], references: [id], onDelete: Cascade)

  @@index([counsellor_id])
  @@index([status])
  @@index([requested_at])
  @@map("payout_requests")
}

model BalanceTransaction {
  id             String                 @id @default(uuid())
  counsellor_id  String
  type           BalanceTransactionType
  amount         Decimal                @db.Decimal(10, 2)
  is_increase    Boolean                @default(true)
  description    String
  reference_id   String? // Can reference appointment_id, payout_request_id, etc.
  reference_type String? // 'appointment', 'payout_request', 'manual_adjustment'
  balance_before Decimal                @db.Decimal(10, 2)
  balance_after  Decimal                @db.Decimal(10, 2)
  processed_by   String? // User ID who processed (for manual adjustments)
  created_at     DateTime               @default(now())

  // Relations
  counsellor User @relation(fields: [counsellor_id], references: [id], onDelete: Cascade)

  @@index([counsellor_id])
  @@index([type])
  @@index([reference_id])
  @@index([created_at])
  @@map("balance_transactions")
}
